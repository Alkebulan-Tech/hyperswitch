{
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Pre-requisites",
      "item": [
        {
          "name": "Create Merchant Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx ",
                  "pm.test(\"[POST]::/accounts - Status code is 2xx\", function () {",
                  "   pm.response.to.be.success;",
                  "});",
                  "",
                  "// Validate if response header has matching content-type",
                  "pm.test(\"[POST]::/accounts - Content-Type is application/json\", function () {",
                  "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {jsonData = pm.response.json();}catch(e){}",
                  "",
                  "// pm.collectionVariables - Set merchant_id as variable for jsonData.merchant_id",
                  "if (jsonData?.merchant_id) {",
                  "   pm.collectionVariables.set(\"merchant_id\", jsonData.merchant_id);",
                  "   console.log(\"- use {{merchant_id}} as collection variable for value\",jsonData.merchant_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{merchant_id}}, as jsonData.merchant_id is undefined.');",
                  "};",
                  "",
                  "/*",
                  "// pm.collectionVariables - Set api_key as variable for jsonData.api_key",
                  "if (jsonData?.api_key) {",
                  "   pm.collectionVariables.set(\"api_key\", jsonData.api_key);",
                  "   console.log(\"- use {{api_key}} as collection variable for value\",jsonData.api_key);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{api_key}}, as jsonData.api_key is undefined.');",
                  "};",
                  "*/",
                  "",
                  "// pm.collectionVariables - Set publishable_key as variable for jsonData.publishable_key",
                  "if (jsonData?.publishable_key) {",
                  "   pm.collectionVariables.set(\"publishable_key\", jsonData.publishable_key);",
                  "   console.log(\"- use {{publishable_key}} as collection variable for value\",jsonData.publishable_key);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{publishable_key}}, as jsonData.publishable_key is undefined.');",
                  "};",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{admin_api_key}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "api-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "x-feature",
                "value": "integ-custom",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "raw": "{\"parent_merchant_id\":\"merchant_1690973834\",\"merchant_id\":\"merchant_{{$timestamp}}\",\"locker_id\":\"m0010\",\"merchant_name\":\"NewAge Retailer\",\"merchant_details\":{\"primary_contact_person\":\"John Test\",\"primary_email\":\"JohnTest@test.com\",\"primary_phone\":\"sunt laborum\",\"secondary_contact_person\":\"John Test2\",\"secondary_email\":\"JohnTest2@test.com\",\"secondary_phone\":\"cillum do dolor id\",\"website\":\"https://www.example.com\",\"about_business\":\"Online Retail with a wide selection of organic products for North America\",\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\"}},\"return_url\":\"https://google.com/success\",\"webhook_details\":{\"webhook_version\":\"1.0.1\",\"webhook_username\":\"ekart_retail\",\"webhook_password\":\"password_ekart@123\",\"payment_created_enabled\":true,\"payment_succeeded_enabled\":true,\"payment_failed_enabled\":true},\"sub_merchants_enabled\":false,\"metadata\":{\"city\":\"NY\",\"unit\":\"245\"},\"primary_business_details\":[{\"country\":\"US\",\"business\":\"food\"}]}"
            },
            "url": {
              "raw": "{{baseUrl}}/accounts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "accounts"
              ]
            },
            "description": "Create a new account for a merchant. The merchant could be a seller or retailer or client who likes to receive and send payments."
          },
          "response": []
        },
        {
          "name": "Create API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {",
                  "  jsonData = pm.response.json();",
                  "} catch(e) {",
                  "}",
                  "",
                  "// pm.collectionVariables - Set api_key_id as variable for jsonData.key_id",
                  "if (jsonData?.key_id) {",
                  "   pm.collectionVariables.set(\"api_key_id\", jsonData.key_id);",
                  "   console.log(\"- use {{api_key_id}} as collection variable for value\", jsonData.key_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{api_key_id}}, as jsonData.key_id is undefined.');",
                  "};",
                  "",
                  "// pm.collectionVariables - Set api_key as variable for jsonData.api_key",
                  "if (jsonData?.api_key) {",
                  "   pm.collectionVariables.set(\"api_key\", jsonData.api_key);",
                  "   console.log(\"- use {{api_key}} as collection variable for value\", jsonData.api_key);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{api_key}}, as jsonData.api_key is undefined.');",
                  "};"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{admin_api_key}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "api-key",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "x-feature",
                "value": "integ-custom",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"API Key 1\",\"description\":null,\"expiration\":\"2030-09-23T01:02:03.000Z\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/api_keys/:merchant_id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api_keys",
                ":merchant_id"
              ],
              "variable": [
                {
                  "key": "merchant_id",
                  "value": "{{merchant_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Adyen Connector",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx ",
                  "pm.test(\"[POST]::/account/:account_id/connectors - Status code is 2xx\", function () {",
                  "   pm.response.to.be.success;",
                  "});",
                  "",
                  "// Validate if response header has matching content-type",
                  "pm.test(\"[POST]::/account/:account_id/connectors - Content-Type is application/json\", function () {",
                  "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {jsonData = pm.response.json();}catch(e){}",
                  "",
                  "// pm.collectionVariables - Set mca_adyen_id as variable for jsonData.merchant_connector_id",
                  "if (jsonData?.merchant_connector_id) {",
                  "   pm.collectionVariables.set(\"mca_adyen_id\", jsonData.merchant_connector_id);",
                  "   console.log(\"- use {{mca_adyen_id}} as collection variable for value\",jsonData.merchant_connector_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{mca_adyen_id}}, as jsonData.merchant_connector_id is undefined.');",
                  "};",
                  "",
                  "// pm.collectionVariables - Set profile_id as variable for jsonData.profile_id",
                  "if (jsonData?.profile_id) {",
                  "   pm.collectionVariables.set(\"profile_id\", jsonData.profile_id);",
                  "   console.log(\"- use {{profile_id}} as collection variable for value\",jsonData.profile_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{profile_id}}, as jsonData.profile_id is undefined.');",
                  "};",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{admin_api_key}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "api-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "x-feature",
                "value": "integ-custom",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "raw": "{\"connector_type\":\"payout_processor\",\"connector_name\":\"adyen\",\"connector_account_details\":{\"auth_type\":\"SignatureKey\",\"api_key\":\"{{adyen_api_key}}\",\"key1\":\"{{adyen_key1}}\",\"api_secret\":\"{{adyen_api_secret}}\"},\"test_mode\":false,\"disabled\":false,\"metadata\":{\"city\":\"NY\",\"unit\":\"245\",\"endpoint_prefix\":\"\"}}"
            },
            "url": {
              "raw": "{{baseUrl}}/account/:account_id/connectors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "account",
                ":account_id",
                "connectors"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "{{merchant_id}}",
                  "description": "(Required) The unique identifier for the merchant account"
                }
              ]
            },
            "description": "Create a new Payment Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialised services like Fraud / Accounting etc."
          },
          "response": []
        },
        {
          "name": "Add Wise Connector",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx ",
                  "pm.test(\"[POST]::/account/:account_id/connectors - Status code is 2xx\", function () {",
                  "   pm.response.to.be.success;",
                  "});",
                  "",
                  "// Validate if response header has matching content-type",
                  "pm.test(\"[POST]::/account/:account_id/connectors - Content-Type is application/json\", function () {",
                  "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {jsonData = pm.response.json();}catch(e){}",
                  "",
                  "// pm.collectionVariables - Set mca_wise_id as variable for jsonData.merchant_connector_id",
                  "if (jsonData?.merchant_connector_id) {",
                  "   pm.collectionVariables.set(\"mca_wise_id\", jsonData.merchant_connector_id);",
                  "   console.log(\"- use {{mca_wise_id}} as collection variable for value\",jsonData.merchant_connector_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{mca_wise_id}}, as jsonData.merchant_connector_id is undefined.');",
                  "};",
                  "",
                  "// pm.collectionVariables - Set profile_id as variable for jsonData.profile_id",
                  "if (jsonData?.profile_id) {",
                  "   pm.collectionVariables.set(\"profile_id\", jsonData.profile_id);",
                  "   console.log(\"- use {{profile_id}} as collection variable for value\",jsonData.profile_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{profile_id}}, as jsonData.profile_id is undefined.');",
                  "};",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{admin_api_key}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "api-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "x-feature",
                "value": "integ-custom",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "raw": "{\"connector_type\":\"payout_processor\",\"connector_name\":\"wise\",\"connector_account_details\":{\"auth_type\":\"BodyKey\",\"api_key\":\"{{wise_api_key}}\",\"key1\":\"{{wise_key1}}\"},\"test_mode\":false,\"disabled\":false,\"metadata\":{\"city\":\"NY\",\"unit\":\"245\"}}"
            },
            "url": {
              "raw": "{{baseUrl}}/account/:account_id/connectors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "account",
                ":account_id",
                "connectors"
              ],
              "variable": [
                {
                  "key": "account_id",
                  "value": "{{merchant_id}}",
                  "description": "(Required) The unique identifier for the merchant account"
                }
              ]
            },
            "description": "Create a new Payment Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialised services like Fraud / Accounting etc."
          },
          "response": []
        },
        {
          "name": "Create Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx ",
                  "pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
                  "   pm.response.to.be.success;",
                  "});",
                  "",
                  "// Validate if response header has matching content-type",
                  "pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
                  "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// Validate if response has JSON Body ",
                  "pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});",
                  "",
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {jsonData = pm.response.json();}catch(e){}",
                  "",
                  "// Response body should have \"customer_id\"",
                  "pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
                  "   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
                  "});",
                  "",
                  "// Response body should have a minimum length of \"1\" for \"customer_id\"",
                  "if (jsonData?.customer_id) {",
                  "pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
                  "  pm.expect(jsonData.customer_id.length).is.at.least(1);",
                  "})};",
                  "",
                  "",
                  "// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
                  "if (jsonData?.customer_id) {",
                  "   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
                  "   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
                  "};",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "x-feature",
                "value": "integ-custom",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "raw": "{\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"First customer\",\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"London\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"GB\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers"
              ]
            },
            "description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
          },
          "response": []
        }
      ]
    },
    {
      "name": "#1 Connector integration sanity",
      "item": [
        {
          "name": "Adyen",
          "item": [
            {
              "name": "Create Card Payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful ",
                      "pm.test(\"[POST]::/payouts/create - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// Validate connector was Adyen ",
                      "pm.test(\"[POST]::/payouts/create - Payout was routed through Adyen\", function () {",
                      "    pm.expect(jsonData.connector).eql(\"adyen\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"card\",\"payout_method_data\":{\"card\":{\"card_number\":\"4111111111111111\",\"expiry_month\":\"3\",\"expiry_year\":\"2030\",\"card_holder_name\":\"John Doe\"}},\"connector\":[\"adyen\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"NaturalPerson\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create SEPA Payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful ",
                      "pm.test(\"[POST]::/payouts/create - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// Validate connector was Adyen ",
                      "pm.test(\"[POST]::/payouts/create - Payout was routed through Adyen\", function () {",
                      "    pm.expect(jsonData.connector).eql(\"adyen\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"iban\":\"NL46TEST0136169112\",\"bic\":\"ABNANL2A\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"connector\":[\"adyen\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"NaturalPerson\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Wise",
          "item": [
            {
              "name": "Create SEPA Payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful ",
                      "pm.test(\"[POST]::/payouts/create - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// Validate connector was Wise ",
                      "pm.test(\"[POST]::/payouts/create - Payout was routed through Wise\", function () {",
                      "    pm.expect(jsonData.connector).eql(\"wise\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"iban\":\"NL46TEST0136169112\",\"bic\":\"ABNANL2A\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"connector\":[\"wise\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"NaturalPerson\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "#2 Payout in stages - create + confirm + fulfill API calls",
      "item": [
        {
          "name": "Card payouts",
          "item": [
            {
              "name": "Create Card Payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout requires creation",
                      "pm.test(\"[POST]::/payouts/create - Payout requires creation\", function () {",
                      "    pm.expect(jsonData.status).eql(\"requires_creation\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"card\",\"payout_method_data\":{\"card\":{\"card_number\":\"4111111111111111\",\"expiry_month\":\"3\",\"expiry_year\":\"2030\",\"card_holder_name\":\"John Doe\"}},\"connector\":[\"adyen\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"NaturalPerson\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":false,\"auto_fulfill\":false}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Confirm payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[PUT]::/payouts/:id - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[PUT]::/payouts/:id - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[PUT]::/payouts/:id - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout requires fulfillment",
                      "pm.test(\"[PUT]::/payouts/:id - Payout requires fulfillment\", function () {",
                      "    pm.expect(jsonData.status).eql(\"requires_fulfillment\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"confirm\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{payout_id}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Fulfill card payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payout_id\":\"\"}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/:id/fulfill",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    ":id",
                    "fulfill"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{payout_id}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Bank payouts",
          "item": [
            {
              "name": "Create SEPA Payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout requires creation",
                      "pm.test(\"[POST]::/payouts/create - Payout requires creation\", function () {",
                      "    pm.expect(jsonData.status).eql(\"requires_creation\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"iban\":\"NL46TEST0136169112\",\"bic\":\"ABNANL2A\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"connector\":[\"adyen\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"NaturalPerson\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":false,\"auto_fulfill\":false}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Confirm payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[PUT]::/payouts/:id - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[PUT]::/payouts/:id - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[PUT]::/payouts/:id - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout requires fulfillment",
                      "pm.test(\"[PUT]::/payouts/:id - Payout requires fulfillment\", function () {",
                      "    pm.expect(jsonData.status).eql(\"requires_fulfillment\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"confirm\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{payout_id}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Fulfill SEPA payout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payout_id\":\"\"}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/:id/fulfill",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    ":id",
                    "fulfill"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{payout_id}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "#3 Smart Retries",
      "item": [
        {
          "name": "Add Config for Enabling Merchant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx ",
                  "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                  "   pm.response.to.be.success;",
                  "});",
                  "",
                  "// Validate if response header has matching content-type",
                  "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                  "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// Validate if response has JSON Body ",
                  "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});",
                  "",
                  "",
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {jsonData = pm.response.json();}catch(e){}",
                  "",
                  "// Response body should have value \"true\" for \"value\"",
                  "if (jsonData?.value) {",
                  "  pm.test(",
                  "    \"[POST]::/configs - Content check if value for 'value' matches 'true'\",",
                  "    function () {",
                  "      pm.expect(jsonData.value).to.eql(\"true\");",
                  "    },",
                  "  );",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{admin_api_key}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "api-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "warning": "This is a duplicate header and will be overridden by the api-key header generated by Postman.",
                "key": "api-key",
                "value": "{{admin_api_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"key\":\"should_call_gsm_multiple_connector_payout_{{merchant_id}}\",\"value\":\"true\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/configs/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "configs",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Config for Retry Count",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx ",
                  "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                  "   pm.response.to.be.success;",
                  "});",
                  "",
                  "// Validate if response header has matching content-type",
                  "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                  "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// Validate if response has JSON Body ",
                  "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});",
                  "",
                  "",
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {jsonData = pm.response.json();}catch(e){}",
                  "",
                  "// Response body should have value \"5\" for \"value\"",
                  "if (jsonData?.value) {",
                  "  pm.test(",
                  "    \"[POST]::/configs - Content check if value for 'value' matches '5'\",",
                  "    function () {",
                  "      pm.expect(jsonData.value).to.eql(\"5\");",
                  "    },",
                  "  );",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{admin_api_key}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "api-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "warning": "This is a duplicate header and will be overridden by the api-key header generated by Postman.",
                "key": "api-key",
                "value": "{{admin_api_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"key\":\"max_auto_multiple_connector_payout_retries_enabled_{{merchant_id}}\",\"value\":\"5\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/configs/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "configs",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx ",
                  "pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
                  "   pm.response.to.be.success;",
                  "});",
                  "",
                  "// Validate if response header has matching content-type",
                  "pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
                  "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// Validate if response has JSON Body ",
                  "pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});",
                  "",
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {jsonData = pm.response.json();}catch(e){}",
                  "",
                  "// Response body should have \"customer_id\"",
                  "pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
                  "   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
                  "});",
                  "",
                  "// Response body should have a minimum length of \"1\" for \"customer_id\"",
                  "if (jsonData?.customer_id) {",
                  "pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
                  "  pm.expect(jsonData.customer_id.length).is.at.least(1);",
                  "})};",
                  "",
                  "",
                  "// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
                  "if (jsonData?.customer_id) {",
                  "   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
                  "   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
                  "};",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "raw": "{\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"First customer\",\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers"
              ]
            },
            "description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
          },
          "response": []
        },
        {
          "name": "[Bank] Payout Create - Adyen",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx ",
                  "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                  "   pm.response.to.be.success;",
                  "});",
                  "",
                  "// Validate if response header has matching content-type",
                  "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                  "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// Validate if response has JSON Body ",
                  "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});",
                  "",
                  "",
                  "// Set response object as internal variable",
                  "let jsonData = {};",
                  "try {jsonData = pm.response.json();}catch(e){}",
                  "",
                  "// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
                  "if (jsonData?.payment_id) {",
                  "   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
                  "   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
                  "};",
                  "",
                  "",
                  "// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
                  "if (jsonData?.mandate_id) {",
                  "   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
                  "   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
                  "};",
                  "",
                  "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                  "if (jsonData?.payout_id) {",
                  "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                  "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                  "};",
                  "",
                  "// Response body should have value \"wise\" for \"connector\"",
                  "if (jsonData?.connector) {",
                  "  pm.test(",
                  "    \"[POST]::/payouts/create - Content check if value for 'connector' matches 'wise'\",",
                  "    function () {",
                  "      pm.expect(jsonData.connector).to.eql(\"wise\");",
                  "    },",
                  "  );",
                  "}",
                  "",
                  "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                  "if (jsonData?.client_secret) {",
                  "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                  "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                  "} else {",
                  "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                  "};"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "options": {
                "raw": {
                  "language": "json"
                }
              },
              "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"bic\":\"ABNANL2A\",\"iban\":\"NL46TEST0136169112\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"KR\",\"bank_city\":\"Amsterdam\"}},\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"NY\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":false,\"metadata\":{\"ref\":\"123\"},\"connector\":[\"adyen\",\"wise\"],\"routing\":{\"type\":\"single\",\"data\":{\"connector\":\"adyen\",\"merchant_connector_id\":\"{{mca_1_id}}\"}},\"confirm\":true,\"auto_fulfill\":false}"
            },
            "url": {
              "raw": "{{baseUrl}}/payouts/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "payouts",
                "create"
              ]
            },
            "description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
          },
          "response": []
        }
      ]
    },
    {
      "name": "#4 Payouts using saved payment methods",
      "item": [
        {
          "name": "Onboard customers and payment methods prior to making transactions",
          "item": [
            {
              "name": "Create Customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Response body should have \"customer_id\"",
                      "pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
                      "   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
                      "});",
                      "",
                      "// Response body should have a minimum length of \"1\" for \"customer_id\"",
                      "if (jsonData?.customer_id) {",
                      "pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
                      "  pm.expect(jsonData.customer_id.length).is.at.least(1);",
                      "})};",
                      "",
                      "",
                      "// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
                      "if (jsonData?.customer_id) {",
                      "   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
                      "   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"First customer\",\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"London\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"GB\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers"
                  ]
                },
                "description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
              },
              "response": []
            },
            {
              "name": "Create Payment Method - Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payment_methods - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payment_methods - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payment_method\":\"card\",\"payment_method_type\":\"debit\",\"payment_method_issuer\":\"Visa\",\"customer_id\":\"{{customer_id}}\",\"metadata\":{\"city\":\"NY\",\"unit\":\"245\"},\"card\":{\"card_number\":\"4111111111111111\",\"card_exp_month\":\"3\",\"card_exp_year\":\"2030\",\"card_holder_name\":\"John Doe\"}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payment_methods",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payment_methods"
                  ]
                },
                "description": "To create a payment method against a customer object. In case of cards, this API could be used only by PCI compliant merchants"
              },
              "response": []
            },
            {
              "name": "Create Payment Method - SEPA",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payment_methods - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payment_methods - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payment_method\":\"bank_transfer\",\"payment_method_type\":\"sepa\",\"customer_id\":\"{{customer_id}}\",\"metadata\":{\"city\":\"NY\",\"unit\":\"245\"},\"bank_transfer\":{\"iban\":\"NL46TEST0136169112\",\"bic\":\"ABNANL2A\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payment_methods",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payment_methods"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Payment Method - Bacs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payment_methods - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payment_methods - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payment_method\":\"bank_transfer\",\"payment_method_type\":\"bacs\",\"customer_id\":\"{{customer_id}}\",\"metadata\":{\"city\":\"NY\",\"unit\":\"245\"},\"bank_transfer\":{\"bank_sort_code\":\"231470\",\"bank_account_number\":\"28821822\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payment_methods",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payment_methods"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List payment methods for a Customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[GET]::/payment_methods/:customer_id - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[GET]::/payment_methods/:customer_id - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[GET]::/payment_methods/:customer_id - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// pm.collectionVariables - Set card_payout_token as variable for jsonData.customer_payment_methods[2].payment_token",
                      "if (jsonData?.customer_payment_methods[2]?.payment_token) {",
                      "   pm.collectionVariables.set(\"card_payout_token\", jsonData.customer_payment_methods[2].payment_token);",
                      "   console.log(\"- use {{card_payout_token}} as collection variable for value\",jsonData.customer_payment_methods[2].payment_token);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{card_payout_token}}, as jsonData.customer_payment_methods[2].payment_token is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set sepa_payout_token as variable for jsonData.customer_payment_methods[1].payment_token",
                      "if (jsonData?.customer_payment_methods[1]?.payment_token) {",
                      "   pm.collectionVariables.set(\"sepa_payout_token\", jsonData.customer_payment_methods[1].payment_token);",
                      "   console.log(\"- use {{sepa_payout_token}} as collection variable for value\",jsonData.customer_payment_methods[1].payment_token);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{sepa_payout_token}}, as jsonData.customer_payment_methods[1].payment_token is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set bacs_payout_token as variable for jsonData.customer_payment_methods[0].payment_token",
                      "if (jsonData?.customer_payment_methods[0]?.payment_token) {",
                      "   pm.collectionVariables.set(\"bacs_payout_token\", jsonData.customer_payment_methods[0].payment_token);",
                      "   console.log(\"- use {{bacs_payout_token}} as collection variable for value\",jsonData.customer_payment_methods[0].payment_token);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{bacs_payout_token}}, as jsonData.customer_payment_methods[0].payment_token is undefined.');",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customer_id",
                    "payment_methods"
                  ],
                  "query": [
                    {
                      "key": "accepted_country",
                      "value": "co",
                      "disabled": true
                    },
                    {
                      "key": "accepted_country",
                      "value": "pa",
                      "disabled": true
                    },
                    {
                      "key": "accepted_currency",
                      "value": "voluptate ea",
                      "disabled": true
                    },
                    {
                      "key": "accepted_currency",
                      "value": "exercitation",
                      "disabled": true
                    },
                    {
                      "key": "minimum_amount",
                      "value": "100",
                      "disabled": true
                    },
                    {
                      "key": "maximum_amount",
                      "value": "10000000",
                      "disabled": true
                    },
                    {
                      "key": "recurring_payment_enabled",
                      "value": "true",
                      "disabled": true
                    },
                    {
                      "key": "installment_payment_enabled",
                      "value": "true",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "customer_id",
                      "value": "{{customer_id}}",
                      "description": "//Pass the customer id"
                    }
                  ]
                },
                "description": "To filter and list the applicable payment methods for a particular Customer ID"
              },
              "response": []
            },
            {
              "name": "[CARD] Create and fulfill Payout using tokens",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payout_token\":\"{{card_payout_token}}\",\"payout_type\":\"card\",\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"connector\":[\"adyen\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[SEPA] Create and fulfill payout using tokens",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payout_token\":\"{{sepa_payout_token}}\",\"payout_type\":\"bank\",\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"connector\":[\"wise\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[BACS] Create and fulfill payout using tokens",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payout_token\":\"{{bacs_payout_token}}\",\"payout_type\":\"bank\",\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"connector\":[\"wise\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Persist PM post successful txns and use them in subsequent txns",
          "item": [
            {
              "name": "Create Customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Response body should have \"customer_id\"",
                      "pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
                      "   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
                      "});",
                      "",
                      "// Response body should have a minimum length of \"1\" for \"customer_id\"",
                      "if (jsonData?.customer_id) {",
                      "pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
                      "  pm.expect(jsonData.customer_id.length).is.at.least(1);",
                      "})};",
                      "",
                      "",
                      "// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
                      "if (jsonData?.customer_id) {",
                      "   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
                      "   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"First customer\",\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"London\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"GB\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers"
                  ]
                },
                "description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
              },
              "response": []
            },
            {
              "name": "[CARD] Create and fulfill Payout using raw PMD",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"card\",\"payout_method_data\":{\"card\":{\"card_number\":\"4111111111111111\",\"expiry_month\":\"3\",\"expiry_year\":\"2030\",\"card_holder_name\":\"John Doe\"}},\"connector\":[\"adyen\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[SEPA] Create and fulfill Payout using raw PMD",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"iban\":\"NL46TEST0136169112\",\"bic\":\"ABNANL2A\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"connector\":[\"adyen\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[BACS] Create and fulfill Payout using raw PMD",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"GBP\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"bank_sort_code\":\"231470\",\"bank_account_number\":\"28821822\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"connector\":[\"wise\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List payment methods for a Customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[GET]::/payment_methods/:customer_id - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[GET]::/payment_methods/:customer_id - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[GET]::/payment_methods/:customer_id - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// pm.collectionVariables - Set card_payout_token as variable for jsonData.customer_payment_methods[2].payment_token",
                      "if (jsonData?.customer_payment_methods[2]?.payment_token) {",
                      "   pm.collectionVariables.set(\"card_payout_token\", jsonData.customer_payment_methods[2].payment_token);",
                      "   console.log(\"- use {{card_payout_token}} as collection variable for value\",jsonData.customer_payment_methods[2].payment_token);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{card_payout_token}}, as jsonData.customer_payment_methods[2].payment_token is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set sepa_payout_token as variable for jsonData.customer_payment_methods[1].payment_token",
                      "if (jsonData?.customer_payment_methods[1]?.payment_token) {",
                      "   pm.collectionVariables.set(\"sepa_payout_token\", jsonData.customer_payment_methods[1].payment_token);",
                      "   console.log(\"- use {{sepa_payout_token}} as collection variable for value\",jsonData.customer_payment_methods[1].payment_token);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{sepa_payout_token}}, as jsonData.customer_payment_methods[1].payment_token is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set bacs_payout_token as variable for jsonData.customer_payment_methods[0].payment_token",
                      "if (jsonData?.customer_payment_methods[0]?.payment_token) {",
                      "   pm.collectionVariables.set(\"bacs_payout_token\", jsonData.customer_payment_methods[0].payment_token);",
                      "   console.log(\"- use {{bacs_payout_token}} as collection variable for value\",jsonData.customer_payment_methods[0].payment_token);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{bacs_payout_token}}, as jsonData.customer_payment_methods[0].payment_token is undefined.');",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customer_id",
                    "payment_methods"
                  ],
                  "query": [
                    {
                      "key": "accepted_country",
                      "value": "co",
                      "disabled": true
                    },
                    {
                      "key": "accepted_country",
                      "value": "pa",
                      "disabled": true
                    },
                    {
                      "key": "accepted_currency",
                      "value": "voluptate ea",
                      "disabled": true
                    },
                    {
                      "key": "accepted_currency",
                      "value": "exercitation",
                      "disabled": true
                    },
                    {
                      "key": "minimum_amount",
                      "value": "100",
                      "disabled": true
                    },
                    {
                      "key": "maximum_amount",
                      "value": "10000000",
                      "disabled": true
                    },
                    {
                      "key": "recurring_payment_enabled",
                      "value": "true",
                      "disabled": true
                    },
                    {
                      "key": "installment_payment_enabled",
                      "value": "true",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "customer_id",
                      "value": "{{customer_id}}",
                      "description": "//Pass the customer id"
                    }
                  ]
                },
                "description": "To filter and list the applicable payment methods for a particular Customer ID"
              },
              "response": []
            },
            {
              "name": "[CARD] Create and fulfill Payout using tokens",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payout_token\":\"{{card_payout_token}}\",\"payout_type\":\"card\",\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"connector\":[\"adyen\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[SEPA] Create and fulfill payout using tokens",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payout_token\":\"{{sepa_payout_token}}\",\"payout_type\":\"bank\",\"amount\":1,\"currency\":\"GBP\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"connector\":[\"wise\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[BACS] Create and fulfill payout using tokens",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful",
                      "pm.test(\"[POST]::/payouts/:id/fulfill - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).eql(\"success\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"payout_token\":\"{{bacs_payout_token}}\",\"payout_type\":\"bank\",\"amount\":1,\"currency\":\"GBP\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"connector\":[\"wise\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "#5 Payouts routing module",
      "item": [
        {
          "name": "Volume Split",
          "item": [
            {
              "name": "Add volume based split rule",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/routing/payouts - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/routing/payouts - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/routing/payouts - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch(e) {",
                      "}",
                      "",
                      "// Validate if algorithm type is volume_split",
                      "pm.test(\"[POST]::/routing/payouts - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.kind).to.eql(\"volume_split\");",
                      "});",
                      "",
                      "// Validate if algorithm was configured for payouts",
                      "pm.test(\"[POST]::/routing/payouts - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.algorithm_for).to.eql(\"payout\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set volume_algorithm_id as variable for jsonData.id",
                      "if (jsonData?.id) {",
                      "   pm.collectionVariables.set(\"volume_algorithm_id\", jsonData.id);",
                      "   console.log(\"- use {{volume_algorithm_id}} as collection variable for value\", jsonData.id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{volume_algorithm_id}}, as jsonData.id is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"name\":\"VolumeBasedRouting\",\"description\":\"This is a volume based routing created at Fri, 02 Feb 2024 05:30:17 GMT\",\"profile_id\":\"{{profile_id}}\",\"algorithm\":{\"type\":\"volume_split\",\"data\":[{\"split\":50,\"connector\":{\"connector\":\"adyen\",\"merchant_connector_id\":\"{{mca_adyen_id}}\"}},{\"split\":50,\"connector\":{\"connector\":\"wise\",\"merchant_connector_id\":\"{{mca_wise_id}}\"}}]}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/routing/payouts",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "routing",
                    "payouts"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Activate this rule for payouts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch(e) {",
                      "}",
                      "",
                      "// Validate if algorithm kind is volume_split",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.kind).to.eql(\"volume_split\");",
                      "});",
                      "",
                      "// Validate if algorithm was configured for payouts",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.algorithm_for).to.eql(\"payout\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/routing/payouts/{{volume_algorithm_id}}/activate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "routing",
                    "payouts",
                    "{{volume_algorithm_id}}",
                    "activate"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Deactivate this rule for payouts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch(e) {",
                      "}",
                      "",
                      "// Validate if algorithm kind is volume_split",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.kind).to.eql(\"volume_split\");",
                      "});",
                      "",
                      "// Validate if algorithm was configured for payouts",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.algorithm_for).to.eql(\"payout\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"profile_id\":\"{{profile_id}}\"}"
                },
                "url": {
                  "raw": "{{baseUrl}}/routing/payouts/deactivate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "routing",
                    "payouts",
                    "deactivate"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Advanced Rule split",
          "item": [
            {
              "name": "Add advanced rule",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/routing/payouts - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/routing/payouts - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/routing/payouts - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch(e) {",
                      "}",
                      "",
                      "// Validate if algorithm type is advanced",
                      "pm.test(\"[POST]::/routing/payouts - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.kind).to.eql(\"advanced\");",
                      "});",
                      "",
                      "// Validate if algorithm was configured for payouts",
                      "pm.test(\"[POST]::/routing/payouts - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.algorithm_for).to.eql(\"payout\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set advanced_algorithm_id as variable for jsonData.id",
                      "if (jsonData?.id) {",
                      "   pm.collectionVariables.set(\"advanced_algorithm_id\", jsonData.id);",
                      "   console.log(\"- use {{advanced_algorithm_id}} as collection variable for value\", jsonData.id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{advanced_algorithm_id}}, as jsonData.id is undefined.');",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"id\":\"routing_merchant_1709540889_pTjRkiN5s7\",\"profile_id\":\"{{profile_id}}\",\"name\":\"Rule Based Routing-2024-2-5\",\"description\":\"This is a rule based routing created at Tue, 05 Mar 2024 06:56:36 GMT\",\"algorithm\":{\"type\":\"advanced\",\"data\":{\"defaultSelection\":{\"type\":\"priority\",\"data\":[]},\"rules\":[{\"name\":\"rule_1\",\"connectorSelection\":{\"type\":\"priority\",\"data\":[{\"connector\":\"wise\",\"merchant_connector_id\":\"{{mca_wise_id}}\"}]},\"statements\":[{\"condition\":[{\"lhs\":\"payment_method\",\"comparison\":\"equal\",\"value\":{\"type\":\"enum_variant\",\"value\":\"bank_transfer\"},\"metadata\":{}}],\"nested\":null}]},{\"name\":\"rule_2\",\"connectorSelection\":{\"type\":\"priority\",\"data\":[{\"connector\":\"adyen\",\"merchant_connector_id\":\"{{mca_adyen_id}}\"}]},\"statements\":[{\"condition\":[{\"lhs\":\"payment_method\",\"comparison\":\"equal\",\"value\":{\"type\":\"enum_variant_array\",\"value\":[\"wallet\",\"card\"]},\"metadata\":{}}],\"nested\":null}]}],\"metadata\":{}}}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/routing/payouts",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "routing",
                    "payouts"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Activate this rule for payouts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/routing/payouts/:id/activate - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/routing/payouts/:id/activate - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/routing/payouts/:id/activate - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch(e) {",
                      "}",
                      "",
                      "// Validate if algorithm type is advanced",
                      "pm.test(\"[POST]::/routing/payouts/:id/activate - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.kind).to.eql(\"advanced\");",
                      "});",
                      "",
                      "// Validate if algorithm was configured for payouts",
                      "pm.test(\"[POST]::/routing/payouts/:id/activate - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.algorithm_for).to.eql(\"payout\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/routing/payouts/{{advanced_algorithm_id}}/activate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "routing",
                    "payouts",
                    "{{advanced_algorithm_id}}",
                    "activate"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[CARD] Create payout using raw PMD",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful ",
                      "pm.test(\"[POST]::/payouts/create - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).to.be.eql(\"success\");",
                      "});",
                      "",
                      "// Validate if payout was routed through Adyen",
                      "pm.test(\"[POST]::/payouts/create - Routed through Adyen\", function () {",
                      "    pm.expect(jsonData.connector).to.be.eql(\"adyen\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"card\",\"payout_method_data\":{\"card\":{\"card_number\":\"4111111111111111\",\"expiry_month\":\"3\",\"expiry_year\":\"2030\",\"card_holder_name\":\"John Doe\"}},\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true,\"profile_id\":\"{{profile_id}}\"}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[SEPA] Create payout using raw PMD",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful ",
                      "pm.test(\"[POST]::/payouts/create - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).to.be.eql(\"success\");",
                      "});",
                      "",
                      "// Validate if payout was routed through Wise",
                      "pm.test(\"[POST]::/payouts/create - Routed through Wise\", function () {",
                      "    pm.expect(jsonData.connector).to.be.eql(\"wise\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"GBP\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"iban\":\"NL46TEST0136169112\",\"bic\":\"ABNANL2A\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true,\"profile_id\":\"{{profile_id}}\"}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[BACS] Create payout using raw PMD",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {jsonData = pm.response.json();}catch(e){}",
                      "",
                      "// Validate if payout was successful ",
                      "pm.test(\"[POST]::/payouts/create - Payout was successful\", function () {",
                      "    pm.expect(jsonData.status).to.be.eql(\"success\");",
                      "});",
                      "",
                      "// Validate if payout was routed through Wise",
                      "pm.test(\"[POST]::/payouts/create - Routed through Wise\", function () {",
                      "    pm.expect(jsonData.connector).to.be.eql(\"wise\");",
                      "});",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "   pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "   console.log(\"- use {{payout_id}} as collection variable for value\",jsonData.payout_id);",
                      "} else {",
                      "   console.log('INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.');",
                      "};",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-feature",
                    "value": "integ-custom",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"GBP\",\"customer_id\":\"{{customer_id}}\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"bank_sort_code\":\"231470\",\"bank_account_number\":\"28821822\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"connector\":[\"wise\"],\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Deactivate this rule for payouts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx ",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Status code is 2xx\", function () {",
                      "   pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "// Validate if response has JSON Body ",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Response has JSON Body\", function () {",
                      "    pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch(e) {",
                      "}",
                      "",
                      "// Validate if algorithm type is advanced",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.kind).to.eql(\"advanced\");",
                      "});",
                      "",
                      "// Validate if algorithm was configured for payouts",
                      "pm.test(\"[POST]::/routing/payouts/deactivate - Algorithm configured for payouts\", function () {",
                      "    pm.expect(jsonData.algorithm_for).to.eql(\"payout\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"profile_id\":\"{{profile_id}}\"}"
                },
                "url": {
                  "raw": "{{baseUrl}}/routing/payouts/deactivate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "routing",
                    "payouts",
                    "deactivate"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      },
      {
        "key": "key",
        "value": "api-key",
        "type": "string"
      }
    ]
  },
  "info": {
    "_postman_id": "8f51a4d2-86d6-4f72-8198-3fff5a4e71af",
    "name": "payout",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "9906252",
    "_collection_link": "https://galactic-capsule-229427.postman.co/workspace/My-Workspace~2b563e0d-bad3-420f-8c0b-0fd5b278a4fe/collection/9906252-8f51a4d2-86d6-4f72-8198-3fff5a4e71af?action=share&creator=9906252&source=collection_link"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_api_key",
      "value": "",
      "type": "string"
    },
    {
      "key": "merchant_id",
      "value": ""
    },
    {
      "key": "publishable_key",
      "value": ""
    },
    {
      "key": "api_key_id",
      "value": ""
    },
    {
      "key": "api_key",
      "value": ""
    },
    {
      "key": "merchant_connector_id",
      "value": ""
    },
    {
      "key": "customer_id",
      "value": ""
    },
    {
      "key": "payout_id",
      "value": ""
    },
    {
      "key": "payment_method_id",
      "value": ""
    },
    {
      "key": "card_payout_token",
      "value": ""
    },
    {
      "key": "sepa_payout_token",
      "value": ""
    },
    {
      "key": "bacs_payout_token",
      "value": ""
    },
    {
      "key": "mca_adyen_id",
      "value": ""
    },
    {
      "key": "profile_id",
      "value": ""
    },
    {
      "key": "mca_wise_id",
      "value": ""
    },
    {
      "key": "algorithm_id",
      "value": ""
    },
    {
      "key": "volume_algorithm_id",
      "value": ""
    },
    {
      "key": "advanced_algorithm_id",
      "value": ""
    },
    {
      "key": "adyen_api_key",
      "value": "",
      "type": "string"
    },
    {
      "key": "adyen_key1",
      "value": "",
      "type": "string"
    },
    {
      "key": "adyen_api_secret",
      "value": "",
      "type": "string"
    },
    {
      "key": "wise_api_key",
      "value": "",
      "type": "string"
    },
    {
      "key": "wise_key1",
      "value": "",
      "type": "string"
    }
  ]
}
